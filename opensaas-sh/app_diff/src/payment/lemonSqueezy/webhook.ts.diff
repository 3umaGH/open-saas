--- template/app/src/payment/lemonSqueezy/webhook.ts
+++ opensaas-sh/app/src/payment/lemonSqueezy/webhook.ts
@@ -1,5 +1,5 @@
 import { type MiddlewareConfigFn, HttpError } from 'wasp/server';
-import { type PaymentsWebhook } from 'wasp/server/api';
+import { type LemonSqueezyWebhook } from 'wasp/server/api';
 import { type PrismaClient } from '@prisma/client';
 import express from 'express';
 import { paymentPlans, PaymentPlanId } from '../plans';
@@ -9,7 +9,7 @@
 import { requireNodeEnvVar } from '../../server/utils';
 
 
-export const lemonSqueezyWebhook: PaymentsWebhook = async (request, response, context) => {
+export const lemonSqueezyWebhook: LemonSqueezyWebhook = async (request, response, context) => {
   try {
     const rawBody = request.body.toString('utf8');
     const signature = request.get('X-Signature');
@@ -73,7 +73,7 @@
   const lemonSqueezyId = customer_id.toString();
   const variantId = first_order_item.variant_id.toString();
 
-  const planId = Object.values(PaymentPlanId).find((planId) => paymentPlans[planId].getPaymentProcessorPlanId() === variantId);
+  const planId = Object.values(PaymentPlanId).find((planId) => paymentPlans[planId].getPaymentProcessorPlanId('lemonsqueezy') === variantId);
   if (!planId) {
     throw new Error(`No plan with lemonsqueezy variant id ${variantId}`);
   }
@@ -100,7 +100,7 @@
   const { customer_id, status, variant_id } = data.data.attributes;
   const lemonSqueezyId = customer_id.toString();
 
-  const planId = Object.values(PaymentPlanId).find((planId) => paymentPlans[planId].getPaymentProcessorPlanId() === variant_id.toString());
+  const planId = Object.values(PaymentPlanId).find((planId) => paymentPlans[planId].getPaymentProcessorPlanId('lemonsqueezy') === variant_id.toString());
 
   if (!planId) {
     throw new Error(`No plan with LemonSqueezy variant id ${variant_id}`);
@@ -130,7 +130,7 @@
   const { customer_id, status, variant_id } = data.data.attributes;
   const lemonSqueezyId = customer_id.toString();
 
-  const planId = Object.values(PaymentPlanId).find((planId) => paymentPlans[planId].getPaymentProcessorPlanId() === variant_id.toString());
+  const planId = Object.values(PaymentPlanId).find((planId) => paymentPlans[planId].getPaymentProcessorPlanId('lemonsqueezy') === variant_id.toString());
 
   if (!planId) {
     throw new Error(`No plan with LemonSqueezy variant id ${variant_id}`);
