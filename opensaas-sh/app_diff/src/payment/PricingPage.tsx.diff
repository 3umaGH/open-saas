--- template/app/src/payment/PricingPage.tsx
+++ opensaas-sh/app/src/payment/PricingPage.tsx
@@ -2,9 +2,11 @@
 import { generateCheckoutSession, getCustomerPortalUrl, useQuery } from 'wasp/client/operations';
 import { PaymentPlanId, paymentPlans, prettyPaymentPlanName } from './plans';
 import { AiFillCheckCircle } from 'react-icons/ai';
-import { useState } from 'react';
+import { Dispatch, SetStateAction, useState } from 'react';
 import { useHistory } from 'react-router-dom';
 import { cn } from '../client/cn';
+import { PaymentProcessorId } from './paymentProcessor';
+import { assertUnreachable } from '../shared/utils';
 
 const bestDealPaymentPlanId: PaymentPlanId = PaymentPlanId.Pro;
 
@@ -38,6 +40,7 @@
 
 const PricingPage = () => {
   const [isPaymentLoading, setIsPaymentLoading] = useState<boolean>(false);
+  const [paymentProcessorId, setPaymentProcessorId] = useState<PaymentProcessorId>('stripe');
 
   const { data: user, isLoading: isUserLoading } = useAuth();
 
@@ -45,7 +48,7 @@
     data: customerPortalUrl,
     isLoading: isCustomerPortalUrlLoading,
     error: customerPortalUrlError,
-  } = useQuery(getCustomerPortalUrl);
+  } = useQuery(getCustomerPortalUrl, paymentProcessorId);
 
   const history = useHistory();
 
@@ -57,7 +60,7 @@
     try {
       setIsPaymentLoading(true);
 
-      const checkoutResults = await generateCheckoutSession(paymentPlanId);
+      const checkoutResults = await generateCheckoutSession({paymentProcessorId, paymentPlanId});
 
       if (checkoutResults?.sessionUrl) {
         window.open(checkoutResults.sessionUrl, '_self');
@@ -95,11 +98,15 @@
             Pick your <span className='text-yellow-500'>pricing</span>
           </h2>
         </div>
-        <p className='mx-auto mt-6 max-w-2xl text-center text-lg leading-8 text-gray-600 dark:text-white'>
-          Choose between Stripe and LemonSqueezy as your payment provider. Just add your Product IDs! Try it
-          out below with test credit card number <br />
-          <span className='px-2 py-1 bg-gray-100 rounded-md text-gray-500'>4242 4242 4242 4242 4242</span>
-        </p>
+        <div className='mx-auto mt-6 max-w-2xl text-center text-lg leading-8 text-gray-600 dark:text-white flex flex-wrap items-center justify-center space-x-2'>
+          <p>Choose between</p>
+          <PaymentProviderSelector paymentProcessorId={paymentProcessorId} setPaymentProcessorId={setPaymentProcessorId} />
+          <p>
+            as your payment provider. Just add your Product IDs! Try them out below with test credit card number <br />
+            <span className='px-2 py-1 bg-gray-100 rounded-md text-gray-500'>4242 4242 4242 4242 4242</span>
+          </p>
+        </div>
+
         <div className='isolate mx-auto mt-16 grid max-w-md grid-cols-1 gap-y-8 lg:gap-x-8 sm:mt-20 lg:mx-0 lg:max-w-none lg:grid-cols-3'>
           {Object.values(PaymentPlanId).map((planId) => (
             <div
@@ -186,7 +193,7 @@
                   )}
                   disabled={isPaymentLoading}
                 >
-                  {!!user ? 'Buy plan' : 'Log in to buy plan'}
+                  {!!user ? `Buy via ${prettyPrintPaymentProcessor(paymentProcessorId)}` : 'Log in to buy plan'}
                 </button>
               )}
             </div>
@@ -198,3 +205,66 @@
 };
 
 export default PricingPage;
+
+type Provider = {
+  id: PaymentProcessorId;
+  label: string;
+  color: 'purple' | 'yellow';
+};
+
+function PaymentProviderSelector({ paymentProcessorId, setPaymentProcessorId }: { paymentProcessorId: string; setPaymentProcessorId: Dispatch<SetStateAction<PaymentProcessorId>> }) {
+  const providers: Provider[] = [
+    { id: 'stripe', label: 'Stripe', color: 'purple' },
+    { id: 'lemonsqueezy', label: 'Lemon Squeezy', color: 'yellow' },
+  ];
+
+  return (
+    <div className='flex items-center justify-center space-x-2'>
+      {providers.map((provider, index) => (
+        <>
+          {index > 0 && <p>or</p>}
+          <PaymentProviderOption
+            key={provider.id}
+            provider={provider}
+            isSelected={paymentProcessorId === provider.id}
+            onChange={() => setPaymentProcessorId(provider.id)}
+          />
+        </>
+      ))}
+    </div>
+  );
+}
+
+function PaymentProviderOption({ provider, isSelected, onChange }: { provider: Provider; isSelected: boolean; onChange: () => void }) {
+  const { label, color } = provider;
+  
+  const baseClasses = 'ml-1 form-checkbox bg-gray-100 rounded duration-200 ease-in-out focus:ring focus:ring-opacity-50';
+  const getColorClasses = (color: string) => {
+    return `checked:bg-${color}-400 border-${color}-400 hover:bg-${color}-400 hover:checked:bg-${color}-600 focus:ring-${color}-300 focus:checked:bg-${color}-400`;
+  };
+
+  return (
+    <label className='relative inline-flex items-center cursor-pointer'>
+      <input
+        type='checkbox'
+        className={`${baseClasses} ${getColorClasses(color)}`}
+        checked={isSelected}
+        onChange={onChange}
+      />
+      <span className={cn(`ml-2 text-${color}-400`, { 'drop-shadow-md': isSelected })}>
+        {label}
+      </span>
+    </label>
+  );
+}
+
+function prettyPrintPaymentProcessor(paymentProcessorId: PaymentProcessorId): string {
+  switch (paymentProcessorId) {
+    case 'stripe':
+      return 'Stripe';
+    case 'lemonsqueezy':
+      return 'Lemon Squeezy';
+    default:
+      assertUnreachable(paymentProcessorId);
+  }
+}
\ No newline at end of file
