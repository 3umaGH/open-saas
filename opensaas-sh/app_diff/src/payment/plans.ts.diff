--- template/app/src/payment/plans.ts
+++ opensaas-sh/app/src/payment/plans.ts
@@ -1,4 +1,6 @@
 import { requireNodeEnvVar } from '../server/utils';
+import { assertUnreachable } from '../shared/utils';
+import { type PaymentProcessorId } from './paymentProcessor';
 
 export type SubscriptionStatus = 'past_due' | 'cancel_at_period_end' | 'active' | 'deleted';
 
@@ -9,7 +11,7 @@
 }
 
 export interface PaymentPlan {
-  getPaymentProcessorPlanId: () => string; // ID of the product/plan you've created via your payment processor. 
+  getPaymentProcessorPlanId: (id: PaymentProcessorId) => string; // ID of the product/plan you've created via your payment processor.
   effect: PaymentPlanEffect;
 }
 
@@ -17,15 +19,42 @@
 
 export const paymentPlans: Record<PaymentPlanId, PaymentPlan> = {
   [PaymentPlanId.Hobby]: {
-    getPaymentProcessorPlanId: () => requireNodeEnvVar('PAYMENTS_HOBBY_SUBSCRIPTION_PLAN_ID'),
+    getPaymentProcessorPlanId: (id) => {
+      switch (id) {
+        case 'stripe':
+          return requireNodeEnvVar('STRIPE_HOBBY_SUBSCRIPTION_PRICE_ID');
+        case 'lemonsqueezy':
+          return requireNodeEnvVar('LEMONSQUEEZY_HOBBY_SUBSCRIPTION_VARIANT_ID');
+        default:
+          assertUnreachable(id)
+      }
+    },
     effect: { kind: 'subscription' },
   },
   [PaymentPlanId.Pro]: {
-    getPaymentProcessorPlanId: () => requireNodeEnvVar('PAYMENTS_PRO_SUBSCRIPTION_PLAN_ID'),
+    getPaymentProcessorPlanId: (id) => {
+      switch (id) {
+        case 'stripe':
+          return requireNodeEnvVar('STRIPE_PRO_SUBSCRIPTION_PRICE_ID');
+        case 'lemonsqueezy':
+          return requireNodeEnvVar('LEMONSQUEEZY_PRO_SUBSCRIPTION_VARIANT_ID');
+        default:
+          assertUnreachable(id);
+      }
+    },
     effect: { kind: 'subscription' },
   },
   [PaymentPlanId.Credits10]: {
-    getPaymentProcessorPlanId: () => requireNodeEnvVar('PAYMENTS_CREDITS_10_PLAN_ID'),
+    getPaymentProcessorPlanId: (id) => {
+      switch (id) {
+        case 'stripe':
+          return requireNodeEnvVar('STRIPE_CREDITS_PRICE_ID');
+        case 'lemonsqueezy':
+          return requireNodeEnvVar('LEMONSQUEEZY_CREDITS_VARIANT_ID');
+        default:
+          assertUnreachable(id);
+      }
+    },
     effect: { kind: 'credits', amount: 10 },
   },
 };
